import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  signInUserInfo,
  updateProfile,
  signInUser,
} from "../../../redux/actions/authActions";
import Head from "next/head";
import Grid from "@material-ui/core/Grid";
import { makeStyles } from "@material-ui/core/styles";
import { Formik } from "formik";
import * as Yup from "yup";
import Input from "../../../components/default/form/input";
import Button from "../../../components/default/form/button";
import Typography from "@material-ui/core/Typography";
import Box from "@material-ui/core/Box";
import Card from "@material-ui/core/Card";
import InputAdornment from "@material-ui/core/InputAdornment";
import { Person, Email } from "@material-ui/icons";
import IconButton from "@material-ui/core/IconButton";
import Preloader from "../../../components/default/progress/loading";
import ErrorAlert from "../../../components/default/form/errorAlert";
import SuccessAlert from "../../../components/default/form/successAlert";
// regex
const usernameRegex = /^[A-Za-z]+$/;
const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i;

const useStyles = makeStyles((theme) => ({
  root: {
    flexGrow: 1,
  },
  paper: {
    padding: theme.spacing(2),
    textAlign: "center",
    color: theme.palette.text.secondary,
  },
  card: {
    padding: "36px",
    marginTop: "5px",
  },
}));

const UpdateProfile = () => {
  const classes = useStyles();
  const dispatch = useDispatch();
  const [isLoading, setIsLoading] = useState(false);
  const user = useSelector((state) => state.auth.userData);
  const { username, email } = user;
  const [error, setError] = React.useState("");
  const [message, setMessage] = React.useState("");

  useEffect(() => {
    const loadedUser = async () => {
      try {
        setIsLoading(true);
        await dispatch(signInUserInfo());
        setIsLoading(false);
      } catch (err) {
        console.log("ER", err.message);
        setIsLoading(false);
      }
    };
    loadedUser();
  }, [dispatch, username, email]);

  return (
    <div className={classes.root}>
      <Head>
        <title>Update Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid container spacing={3}>
        <Grid item xs={12} md={3} sm={12}></Grid>
        <Grid item xs={12} md={6} sm={12}>
          {isLoading ? (
            <Preloader />
          ) : (
            <Card className={classes.card}>
              <Box py={5}>
                <Typography variant="h4" color="primary" align="left">
                  Update Profile
                </Typography>
              </Box>
              <Box py={3}>
                {error ? (
                  <ErrorAlert title={error} />
                ) : message ? (
                  <SuccessAlert title={message} />
                ) : (
                  ""
                )}
              </Box>
              <Formik
                initialValues={{
                  username: username,
                  email: email,
                }}
                validationSchema={Yup.object({
                  username: Yup.string()
                    .min(3, "Username must be atleast 3 characters")
                    .max(20, "Username is too Long!")
                    .matches(
                      usernameRegex,
                      "Only alphabets are allowed for this field "
                    )
                    .required("Username is required"),
                  email: Yup.string()
                    .email("Email is invalid")
                    .matches(emailRegex, "Email is invalid ")
                    .required("Email is required"),
                })}
                onSubmit={async (values) => {
                  try {
                    setIsLoading(true);
                    setError("");
                    await dispatch(updateProfile(values));
                    setIsLoading(false);
                    setMessage("Profile updated successfully");
                    await dispatch(signInUserInfo());
                    await dispatch(signInUser());
                  } catch (err) {
                    setMessage("");
                    setError(err.message);
                    setIsLoading(false);
                  }
                }}
              >
                {(props) => (
                  <form onSubmit={props.handleSubmit}>
                    <Input
                      type="text"
                      onChange={props.handleChange}
                      onBlur={props.handleBlur}
                      value={props.values.username}
                      label="Username"
                      name="username"
                      error={props.errors.username ? true : false}
                      errortext={props.errors.username}
                      InputProps={{
                        endAdornment: (
                          <InputAdornment position="start">
                            <IconButton edge="end">
                              {
                                <Person
                                  color={
                                    props.errors.username ? "error" : "primary"
                                  }
                                />
                              }
                            </IconButton>
                          </InputAdornment>
                        ),
                      }}
                    />

                    {/* email */}
                    <Input
                      type="email"
                      onChange={props.handleChange}
                      onBlur={props.handleBlur}
                      value={props.values.email}
                      label="Email"
                      name="email"
                      error={props.errors.email ? true : false}
                      errortext={props.errors.email}
                      InputProps={{
                        endAdornment: (
                          <InputAdornment position="start">
                            <IconButton edge="end">
                              {
                                <Email
                                  color={
                                    props.errors.email ? "error" : "primary"
                                  }
                                />
                              }
                            </IconButton>
                          </InputAdornment>
                        ),
                      }}
                    />

                    <Button
                      label={isLoading ? <Preloader /> : "Update Profile"}
                      type="submit"
                    />
                  </form>
                )}
              </Formik>
            </Card>
          )}
        </Grid>
        <Grid item xs={12} md={3} sm={12}></Grid>
      </Grid>
    </div>
  );
};

UpdateProfile.layout = "DashboardLayout";
export default UpdateProfile;
